---
title: "00-EDAofOxygen"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

ID: "AD" \~ "FP1" "MB" \~ "FP2" "MM" \~ "FP3" "MS" \~ "FP4" "NL" \~ "FP5"

```{r}
library(tidyverse)
library(lubridate)
ggthemr::ggthemr("greyscale")

#Import and prepare data
column_names <- c("Time","Oload","HR","VE","BRFEV%", "VO2","VCO2","RER","VO2kg")
subject <- c(rep("FP1",8),rep("FP2",8),rep("FP3",8),rep("FP4",8),rep("FP5",8))
contraction <- c(rep("CON",4), rep("EXC",4),rep("CON",4), rep("EXC",4),
                 rep("CON",4), rep("EXC",4),rep("CON",4), rep("EXC",4),rep("CON",4), rep("EXC",4))
Load <- c(20,40,60,80,20,40,60,80,20,40,60,80,20,40,60,80,20,40,60,80,
          20,40,60,80,20,40,60,80,20,40,60,80,20,40,60,80,20,40,60,80)

path = "../data/rawData/vyn/"
path_allSubjects <- list.files(path = path, pattern = ".csv", full.names = TRUE)
data <- path_allSubjects %>% 
  map(~data.table::fread(., skip = 2))

for (i in 1:length(data)){
  #The 14th csv files already has the time column as integer where the others
  #are character strings. Therefore, an if statement is made to ignore the
  #change of time column for the 14th csv file.
  
  if (i == 14){
    colnames(data[[i]]) <- column_names
    data[[i]] <- data[[i]] %>% 
      mutate(Subject = subject[[i]],
             Contraction = contraction[[i]],
             Load = Load[[i]],
             #Also recalculating RER as it gave insane high numbers.
             RER = VCO2 / VO2) %>% 
      select(-c("Oload","HR","BRFEV%"))
  } else {
    colnames(data[[i]]) <- column_names
    data[[i]] <- data[[i]] %>% 
      mutate(Time = period_to_seconds(ms(Time)),
             Subject = subject[[i]],
             Contraction = contraction[[i]],
             Load = Load[[i]]) %>% 
      select(-c("Oload","HR","BRFEV%"))
  }
  
  #The 34th csv file also has an error, where the VO2 and CO2 columns are characters
  #instead of numeric values like in the others
  if (i == 34){
    data[[i]] <- data[[i]] %>% 
      mutate(VO2 = as.numeric(VO2),
             VCO2 = as.numeric(VO2),
             VO2kg = as.numeric(VO2kg))
  }
  
  #imputating missing values based on the nearest points and weighted by an exponential factor.
  data[[i]] <- imputeTS::na_ma(data[[i]], k = 3, weighting = "exponential")
  
  #data.table::fwrite(data[[i]], path_allSubjects[[i]])
  
}

df <- data %>% 
  bind_rows()
```
