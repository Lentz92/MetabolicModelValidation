---
title: "01-Plots_and_statistics"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

ID: "AD" \~ "FP1" "MB" \~ "FP2" "MM" \~ "FP3" "MS" \~ "FP4" "NL" \~ "FP5"


```{r}
library(tidyverse)
ggthemr::ggthemr("greyscale")
#Main objective with this chunk is to import the original modelled data from anybody (metabolicModels) 
#and the data from the python script that went through the pulmonary gas exchange data (metabolicEquation)
#then merging them.


#We are mainly interested in the "anymet" column from this csv
metabolicModels <- read_csv("metabolisme_data.csv") %>% 
  mutate(
    subjects = case_when(
      subjects ==  "AD" ~ "FP1",
      subjects ==  "MB" ~ "FP2",
      subjects ==  "MM" ~ "FP3",
      subjects ==  "MS" ~ "FP4",
      subjects ==  "NL" ~ "FP5"),
    
    intensity = substr(intensity, 1,2),
    ID = paste(subjects, contraction, intensity, sep="_")
  )

#All the data from the python script.
path = "../data/vynProcessedData/"
dataList <- list.files(path = path, pattern = ".csv", full.names = TRUE) %>% 
  map(~data.table::fread(.))

metabolicEquation <- dataList %>% 
  bind_rows(dataList) %>%    # make larger sample data
  mutate_if(is.list, simplify_all) %>%    # flatten each list element internally 
  unnest() %>% 
  mutate(
    Contraction = case_when(
      Contraction == "con" ~ "Concentric",
      Contraction == "exc" ~ "Eccentric"),
    ID = paste(Subject, Contraction, Load, sep="_")
  )

#merge them so we have the output from the muscuskeletal model with the gas exchange + other information
df <- merge(metabolicModels, 
            metabolicEquation,
            by = "ID") %>% 
  select(ID, AnyMet, model, MetabolicWorkPerRep, MetabolicCalculation, Ekstension_time, 
         Flexion_time, Work.y, Watt, Subject, Load, Contraction, Bw) %>% 
  rename(work = Work.y,
         modelled_work_per_rep = AnyMet) %>% 
  janitor::clean_names() %>% 
  mutate(
    mech_watt_kg = (watt / bw),
    modelled_watt_kg= (modelled_work_per_rep / bw) / (`ekstension_time` + `flexion_time`),
    metabolic_watt_kg = (metabolic_work_per_rep / bw) / (`ekstension_time` + `flexion_time`)
  ) %>% 
  distinct()

data.table::fwrite(df, "cleaned_metabolisme_data.csv")
```

```{r}
#Main plot
koeligvinPlot <- function(metabolicCalculation){
  p1 <- df %>% 
    filter(model != "Bhargava_on" & model != "Margaria1" & model != "ModifiedMargaria") %>%
    filter(metabolic_calculation == metabolicCalculation) %>% 
  mutate(modelConType = as_factor(paste(model, contraction, sep=" ")),
         model = fct_relevel(modelConType, "Margaria Concentric", 
                             "Bhargava Concentric", 
                             "Umberger Concentric",
                             "Margaria Eccentric",
                             "Bhargava Eccentric",
                             "Umberger Eccentric")) %>% 
    ggplot(aes(x = metabolic_watt_kg, y = modelled_watt_kg, color = subject)) + 
    geom_point(alpha = .5) + 
    stat_smooth(method = "lm", formula = y ~ x, se = FALSE, alpha=.5, lwd = .5) + 
    stat_smooth(aes(group = model), method = "lm", formula = y ~ x, se = FALSE, color = "black", lwd = 1.25) +
    geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
    xlim(0,2.75) + 
    ylim(0,2.75) + 
    facet_wrap(~modelConType, ncol = 3,
               labeller = label_wrap_gen(width=10)) + 
    labs(
      x = "Calculated [Watt / kg]",
      y = "Measured [Watt / kg]"
    ) + 
    theme(
      aspect.ratio = 0.75,
      strip.text.x = element_text(
        size = 15, face = "bold"),
      axis.title = element_text(
        size = 15, face="bold"),
      legend.position = "none",
      axis.text.x = element_text(size = 18),
      axis.text.y = element_text(size= 18),
      plot.title = element_text(size = 25, face = "bold")
    ) +
    ggtitle(glue::glue("{metabolicCalculation}"))
  
  return(p1)
}

p1 <- koeligvinPlot("peronnet")
p1

#ggsave(file="../resultater/KoeleWijnPlotSecondRun.jpeg", plot = p1, width=10, height=8, dpi = 1200)
```


```{r}
#Plot difference between metabolic calculations
df %>% 
  filter(metabolic_calculation %in% c("peronnet", "original_peronnet")) %>% 
  ggplot(aes(x = load, y = metabolic_watt_kg, color = metabolic_calculation)) + 
  geom_line() + 
  geom_point() + 
  facet_grid(contraction ~ subject) + 
  labs(x = "Load [N]",
       y = "Metabolic energy [J/s/bw]") + 
  theme(legend.position = "top") + 
  ggtitle("Difference between original peronnet table and Peronnet formula from Kipp et al 2018",
          subtitle = "y-axis shows metabolic energy produced relative to time and bodyweight")
```

